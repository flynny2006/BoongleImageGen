
import { GoogleGenAI, GenerateImagesResponse } from "@google/genai";

export interface GeneratedImageData {
  base64Data: string;
  mimeType: string;
}

export const generateImagesAPI = async (prompt: string, numberOfImages: number = 1): Promise<GeneratedImageData[]> => {
  const userApiKey = localStorage.getItem('geminiApiKey');

  if (!userApiKey) {
    throw new Error("Gemini API Key not set by user. Please set your API key in the application settings (click the 'Set API Key' button in the header).");
  }

  // Initialize the GoogleGenAI client with the user's API key for each call
  const ai = new GoogleGenAI({ apiKey: userApiKey }); 

  try {
    const response: GenerateImagesResponse = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002',
      prompt: prompt,
      config: { 
        numberOfImages: numberOfImages, 
        outputMimeType: 'image/jpeg' // Keep as JPEG for consistency or make configurable
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      return response.generatedImages.map(imgWrapper => {
        if (imgWrapper.image.imageBytes && imgWrapper.image.mimeType) {
          return {
            base64Data: imgWrapper.image.imageBytes,
            mimeType: imgWrapper.image.mimeType
          };
        }
        // This case should ideally not be reached if the API behaves as expected
        console.error('API response contained an image wrapper with missing data:', imgWrapper);
        throw new Error('API response contained an image with missing imageBytes or mimeType.');
      }).filter(Boolean) as GeneratedImageData[];
    } else {
      // This could mean the prompt was rejected, or some other non-error producing issue
      throw new Error('No images were generated by the API. The prompt might have been blocked or unfulfillable.');
    }
  } catch (error) {
    console.error('Error generating image with Gemini API:', error);
    if (error instanceof Error) {
      // Check for common API key related errors
      if (error.message.includes("API key not valid") || 
          error.message.includes("API_KEY_INVALID") ||
          error.message.includes("permission denied") || // Often auth related
          error.message.includes("unauthenticated")) {
         throw new Error("Invalid or unauthorized Gemini API Key. Please check your API key settings. The key might be incorrect, expired, or lack necessary permissions.");
      }
      // General Gemini API error
      throw new Error(`Gemini API error: ${error.message}`);
    }
    // Fallback for unknown errors
    throw new Error('An unknown error occurred while generating the image using the Gemini API.');
  }
};
