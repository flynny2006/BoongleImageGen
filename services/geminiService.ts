import { GoogleGenAI, GenerateImagesResponse } from "@google/genai";

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  console.error("API_KEY for Gemini is not set. Please set the process.env.API_KEY environment variable.");
}

const ai = new GoogleGenAI({ apiKey: API_KEY || "FALLBACK_KEY_SHOULD_NOT_BE_USED_IN_PROD" }); 

export interface GeneratedImageData {
  base64Data: string;
  mimeType: string;
}

export const generateImagesAPI = async (prompt: string, numberOfImages: number = 1): Promise<GeneratedImageData[]> => {
  if (!API_KEY) {
    throw new Error("Gemini API Key is not configured. Cannot generate images.");
  }

  try {
    const response: GenerateImagesResponse = await ai.models.generateImages({
      model: 'imagen-3.0-generate-002',
      prompt: prompt,
      config: { 
        numberOfImages: numberOfImages, 
        outputMimeType: 'image/jpeg'
      },
    });

    if (response.generatedImages && response.generatedImages.length > 0) {
      return response.generatedImages.map(imgWrapper => {
        if (imgWrapper.image.imageBytes && imgWrapper.image.mimeType) {
          return {
            base64Data: imgWrapper.image.imageBytes,
            mimeType: imgWrapper.image.mimeType
          };
        }
        throw new Error('API response contained an image with missing data.');
      }).filter(Boolean) as GeneratedImageData[]; // Filter out any potential nulls if logic changes
    } else {
      throw new Error('No images were generated by the API.');
    }
  } catch (error) {
    console.error('Error generating image with Gemini API:', error);
    if (error instanceof Error) {
      if (error.message.includes("API key not valid")) {
         throw new Error("Invalid API Key. Please check your Gemini API key configuration.");
      }
      throw new Error(`Gemini API error: ${error.message}`);
    }
    throw new Error('An unknown error occurred while generating the image.');
  }
};